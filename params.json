{"name":"A new home for ASCIIMathML","tagline":"Translating ASCII math notation to MathML and graphics","body":"### Welcome to ASCIIMathML\r\n\r\nWould you like to easily produce good-looking math formulas on webpages using a simple calculator-style syntax and your own ASCII or HTML editor? Here is a free multi-platform solution (and if you prefer it, LaTeX-style formulas also work). \r\n\r\n### Github repository\r\n\r\nASCIIMathML development is now organized on github at https://github.com/mathjax/asciimathml\r\n\r\n### Authors and Contributors\r\n\r\n* Peter Jipsen (@jipsen), creator of ASCIIMathML\r\n* David Lippman (@drlippman)\r\n* Adrian Sieber (@adius)\r\n\r\n### Related projects\r\n\r\n\r\n### Syntax\r\n\r\nThe main aims of the ASCIIMathML syntax are: \r\n\r\n1. close to standard mathematical notation \r\n2. easy to read \r\n3. easy to type\r\n\r\nYou can use your favorite editor to write HTML pages that use this JavaScript program. If the page is viewed by a browser that does not support MathML or JavaScript, the ASCII formulas are still quite readable. Most users will not have to read the technicalities on this page. If you type\r\n\r\n    amath x^2 or a_(m n) or a_{m n} or (x+1)/y or sqrtx endamath\r\n\r\nyou pretty much get what you expect: amath x\\^2 or a\\_(m n) or a\\_{m n} or (x+1)/y or sqrtx endamath. The a\\`\\`math … enda\\`\\`math tokens are used to start/stop the **new auto-math-recognize mode**. Of course one can still use the \\\\\\`…\\\\\\` back-quotes to delimit math formulas explicitly (\\\\\\$…\\\\\\$ should only be used for LaTeX formulas). The choice of grouping parenthesis is up to you (they don’t have to match either). If the displayed expression can be parsed uniquely without them, they are omitted. Printing the table of constant symbols (below) may be helpful (but is not necessary if you know the LaTeX equivalents).\r\n\r\nIt is hoped that this simple input format for MathML will further encourage its use on the web. The remainder of this page gives a fairly detailed specification of the ASCII syntax. **The expressions described here correspond to a wellspecified subset of Presentation MathML and behave in a predictable way.**\r\n\r\nThe syntax is very permissive and does not generate syntax errors. This allows mathematically incorrect expressions to be displayed, which is important for teaching purposes. It also causes less frustration when previewing formulas.\r\n\r\nThe parser uses no operator precedence and only respects the grouping brackets, subscripts, superscript, fractions and (square) roots. This is done for reasons of efficiency and generality. The resulting MathML code can quite easily be processed further to ensure additional syntactic requirements of any particular application.\r\n\r\n**The grammar:** Here is a definition of the grammar used to parse ASCIIMathML expressions. In the Backus-Naur form given below, the letter on the left of the ::= represents a category of symbols that could be one of the possible sequences of symbols listed on the right. The vertical bar | separates the alternatives.\r\n\r\n    c ::= [A-z] | numbers | greek letters | other constant symbols (see below)\r\n    u ::= 'sqrt' | 'text' | 'bb' |     other unary symbols for font commands\r\n    b ::= 'frac' | 'root' | 'stackrel' binary symbols\r\n    l ::= ( | [ | { | (: | {:          left brackets\r\n    r ::= ) | ] | } | :) | :}          right brackets\r\n    S ::= c | lEr | uS | bSS | \"any\"   simple expression\r\n    E ::= SE | S/S |S_S | S^S | S_S^S  expression (fraction, sub-, super-, subsuperscript)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}